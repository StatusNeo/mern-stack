{"version":3,"sources":["components/AppNavbar.js","components/Evangelist.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","toggle","setState","isOpen","state","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","Evangelist","items","id","uuid","name","Button","style","marginBottom","prompt","ListGroup","TransitionGroup","map","CSSTransition","key","timeout","classNames","ListGroupItem","size","filter","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SA+CeA,E,kDAlCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,OAAS,WACP,EAAKC,SAAS,CACZC,QAAS,EAAKC,MAAMD,UAPtB,EAAKC,MAAQ,CACXD,QAAQ,GAHO,E,qDAcjB,OACJ,6BACM,kBAACE,EAAA,EAAD,CAAQC,MAAM,OAAOC,MAAI,EAACC,OAAO,KAAKC,UAAU,QAC9C,kBAACC,EAAA,EAAD,KACL,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,iBACA,kBAACC,EAAA,EAAD,CAAeC,QAASC,KAAKd,SAC1B,kBAACe,EAAA,EAAD,CAAUb,OAAQY,KAAKX,MAAMD,OAAQc,QAAM,GACrC,kBAACC,EAAA,EAAD,CAAKT,UAAU,UAAUQ,QAAM,GACpC,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,uCAAd,oB,GAxBeS,a,wDCkDTC,E,4MAvDflB,MAAQ,CACRmB,MAAO,CACP,CAAEC,GAAIC,cAAQC,KAAM,aACpB,CAAEF,GAAIC,cAAQC,KAAM,UACpB,CAAEF,GAAIC,cAAQC,KAAM,SACpB,CAAEF,GAAIC,cAAQC,KAAM,iB,uDAIV,IAAD,OACAH,EAAUR,KAAKX,MAAfmB,MACT,OACA,kBAACb,EAAA,EAAD,KACA,kBAACiB,EAAA,EAAD,CACArB,MAAM,OACNsB,MAAQ,CAACC,aAAc,QACvBf,QACA,WAAQ,IAAMY,EAAOI,OAAO,cACzBJ,GACH,EAAKxB,UAAS,SAAAE,GAAK,MAAK,CACxBmB,MAAM,GAAD,mBAAMnB,EAAMmB,OAAZ,CAAmB,CAACC,GAAIC,cAAOC,gBAPpC,YAcA,kBAACK,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAiBvB,UAAU,iBAC1Bc,EAAMU,KAAI,gBAAET,EAAF,EAAEA,GAAGE,EAAL,EAAKA,KAAL,OACV,kBAACQ,EAAA,EAAD,CAAeC,IAAKX,EAAIY,QAAS,IAAKC,WAAW,QACjD,kBAACC,EAAA,EAAD,KACC,kBAACX,EAAA,EAAD,CACDlB,UAAU,aACVH,MAAM,SACNiC,KAAK,KACLzB,QAAW,WACZ,EAAKZ,UAAS,SAAAE,GAAK,MAAK,CACxBmB,MAAOnB,EAAMmB,MAAMiB,QAAO,SAAAC,GAAI,OAAIA,EAAKjB,KAAOA,WAN5C,QAWCE,c,GA7CsBL,a,MCUVqB,MATf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ad95336.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Container\n} from 'reactstrap';\n\nclass AppNavbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    }\n  }\n  \n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  \n  render() {\n    return (\n<div>\n      <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n        <Container>\n\t  <NavbarBrand href=\"/\">Shopping List</NavbarBrand>\n\t  <NavbarToggler onClick={this.toggle} />\n   \t  <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n\t      <NavItem>\n\t        <NavLink href=\"https://www.github.com/NishkarshRaj\">GitHub</NavLink>\n\t      </NavItem>\n\t    </Nav>\n\t  </Collapse>\n        </Container>\n      </Navbar>\n    </div>\n    );    \n  }\n}\n\nexport default AppNavbar;\n\n","import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport {v1 as uuid} from 'uuid';\n\nclass Evangelist extends Component\n{\nstate = { \nitems: [\n{ id: uuid(), name: 'Nishkarsh' },\n{ id: uuid(), name: 'Shreya' },\n{ id: uuid(), name: 'Karan' },\n{ id: uuid(), name: 'Megha Rawat' }\n]\n}\n\nrender() {\n  const {items } = this.state;\nreturn(\n<Container>\n<Button \ncolor=\"dark\" \nstyle={ {marginBottom: '2rem' } } \nonClick = {\n() => { const name = prompt('Enter Item');\nif(name) {\nthis.setState(state => ({\nitems: [...state.items, {id: uuid(),name}]\n}));\n} \n}}\n\n>Add Item</Button>\n\n<ListGroup>\n<TransitionGroup className=\"shopping-list\">\n{items.map(({id,name}) => (\n <CSSTransition key={id} timeout={500} classNames=\"fade\">\n\t<ListGroupItem>\n\t\t<Button\n className=\"remove-btn\"\n color=\"danger\"\n size=\"sm\"\n onClick = {() => {\nthis.setState(state => ({\nitems: state.items.filter(item => item.id !== id)\n}))\n}}\n\n>&times;</Button>\n\t\t{name}\n\t</ListGroupItem>\n </CSSTransition>\n))}\n</TransitionGroup>\n</ListGroup>\n</Container>\n);\n}\n\n}\n\nexport default Evangelist; \n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AppNavbar from './components/AppNavbar';\nimport Evangelist from './components/Evangelist';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppNavbar />\n      <Evangelist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}